@using RdxChat.Entities
@model RdxChat.Entities.ChatModel

<link rel="stylesheet" href="css/chat.css">

<div class="chat">
    <div class="chat-header clearfix">
        <div class="chat-about">
            <div class="chat-with">@Model.CompanionName</div>
        </div>
    </div>

    <div class="chat-history">
        <ul class="chat-history-list">
            @foreach (var message in Model.Messages)
            {
                if (message.UserId == Model.UserId)
                {
                    <li class="clearfix">
                        <div class="message-data align-right">
                            <div class="message-data-name">@message.UserName</div>
                            <div class="message-data-time">@message.SendingTime.ToString("dd.MM.yy H:mm")</div>
                        </div>
                        <div class="message other-message float-right" id="@message.MessageId">
                            @message.Message
                        </div>
                    </li>
                }
                else
                {
                    <li>
                        <div class="message-data">
                            <div class="message-data-name">@message.UserName</div>
                            <div class="message-data-time">@message.SendingTime.ToString("dd.MM.yy H:mm")</div>
                        </div>
                        <div class="message my-message" id="@message.MessageId">
                            @message.Message
                        </div>
                    </li>
                }
            }

        </ul>
    </div>

    <div class="chat-message clearfix">
        <textarea name="message-to-send" id="message-to-send" placeholder ="Введите ваше сообщение" rows="3"></textarea>
        <button class="send">Отправить</button>
    </div>
</div>

<script src="/js/signalr/dist/browser/signalr.js"></script>
<script type="module">
    const connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

    connection.on("NotifyPageReload", async function () {
        window.location.reload();
    });

    connection.on("NotifyMessage", async function (messageDto) {
        alert(messageDto);
        const messageModel = JSON.parse(messageDto);

        const existMessageBlock = document.getElementById(messageModel['MessageId']);
        if (existMessageBlock !== undefined && existMessageBlock !== null) {
            return;
        }
        
        const response = await fetch('/save-message', {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                Message: messageModel['Message'],
                MessageId: messageModel['MessageId'],
                ReceiverId: messageModel['ReceiverId'],
                SenderId: messageModel['SenderId'],
                SavePath: messageModel['ReceiverId'],
                SenderName: messageModel['UserName']
            })
        });
        
        document.getElementsByClassName("chat-with")[0].textContent = messageModel["UserName"];
        
        const li = document.createElement("li");
        const messageData = document.createElement("div");
        messageData.className = "message-data";
        const messageDataName = document.createElement("div");
        messageDataName.className = "message-data-name";
        messageDataName.innerText = messageModel["UserName"];
        const messageDataTime = document.createElement("div");
        messageDataTime.className = "message-data-time";
        const time = new Date().toLocaleString("ru");
        messageDataTime.innerText = `${time.substring(0, 6)}${time.substring(8, 10)} ${time.substring(12, 17)}`;
        const messageBlock = document.createElement("div");
        messageBlock.className = "message my-message";
        messageBlock.id = messageModel['MessageId']
        messageBlock.innerText = messageModel['Message'];

        messageData.appendChild(messageDataName);
        messageData.appendChild(messageDataTime);
        li.appendChild(messageData);
        li.appendChild(messageBlock);
        
        document.getElementsByClassName("chat-history-list")[0].appendChild(li);
        const history = document.getElementsByClassName("chat-history")[0];
        history.scrollTo(0, history.scrollHeight);
    });
    
    connection.start();
    
    document.getElementsByClassName("send")[0].addEventListener('click', async function () {
        const message = document.getElementById("message-to-send").value;
        
        if (message.length === 0) {
            return;
        }

        const request = {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                MessageType: `@MessageTypeMap.ChatMessage`,
                Message: message,
                ReceiverId: '@Model.CompanionId',
                SenderId: '@Model.UserId',
                SavePath:'@Model.UserId',
                SenderName: '@Model.UserName'
            })
        };
        const response = await fetch('/save-message', request);
        const json = await response.json();
        request.body = json;
        
        const li = document.createElement("li");
        li.className = "clearfix";
        const messageData = document.createElement("div");
        messageData.className = "message-data align-right";
        const messageDataName = document.createElement("div");
        messageDataName.className = "message-data-name";
        messageDataName.innerText = "@Model.UserName";
        const messageDataTime = document.createElement("div");
        messageDataTime.className = "message-data-time";
        const time = new Date().toLocaleString("ru");
        messageDataTime.innerText = `${time.substring(0, 6)}${time.substring(8, 10)} ${time.substring(12, 17)}`;
        const messageBlock = document.createElement("div");
        messageBlock.className = "message other-message float-right";
        messageBlock.id = JSON.parse(json)["MessageId"];
        messageBlock.innerText = message;
        
        messageData.appendChild(messageDataName);
        messageData.appendChild(messageDataTime);
        li.appendChild(messageData);
        li.appendChild(messageBlock);
        document.getElementsByClassName("chat-history-list")[0].appendChild(li);
        const history = document.getElementsByClassName("chat-history")[0];
        history.scrollTo(0, history.scrollHeight);

        document.getElementById("message-to-send").value = "";

        await fetch('/send-message', request);
    });
    
    await fetch(`/sync-history?companionId=@Model.CompanionId`);
</script>